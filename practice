Write a function named outOfOrder that takes as parameters an array of double and an
int parameter named size and returns a value of type int. This function will test this
array for being out of order, meaning that the array violates the following condition:
a[0] <= a[1] <= a[2] <= ...
The function returns -1 if the elements are not out of order; otherwise, it will return the
index of the first element of the array that is out of order. For example, consider the
declaration
double a[10] = {1.2, 2.1, 3.3, 2.5, 4.5,
 7.9, 5.4, 8.7, 9.9, 1.0};
In the array above, a[2] and a[3] are the first pair out of order and a[3] is the first
element out of order, so the function returns 3. If the array were sorted, the function would
return -1.

// NOT COMPLETE
OUT PUT IS: 
5
2
(should be 5 only)
*****************************************************************

#include <iostream>
#include <cmath>
using namespace std;

int outoforder (double arr[],int size);

int main()
{
    
    double array[3] = {2.2,5.2,2.3};
    int limit = 3;
    outoforder(array,limit);

    return 0;

}

int outoforder (double arr[],int size)
{
    for (int i=0; i<size;i++)
    {
        if(arr[i] > arr[i+1])
        {
            cout << static_cast<int>(arr[i]/1) << endl;
        }
    }
    return -1;

}
